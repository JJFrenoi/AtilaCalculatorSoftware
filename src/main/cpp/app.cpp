/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#define _CRT_SECURE_NO_WARNINGS
#include <string>
#include <cstring>
#include <vector>
#include <memory>
#include <assert.h>
#include <iostream>
#include <assert.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <filesystem>
#include <fstream>
#include "app.h"

#include "binary_data_GiD.hpp"

using namespace std;

using std::cout;
using std::cerr;
using std::endl;
using std::string;



int main(int argc, char *argv[]) {
	double f = 0.;
	char dummy_char[SIZE];
	GiD_PostInit();
	GiD_OpenPostResultFile("test.flavia.msh", GiD_PostAscii);
	cout<<string(argv[1])+string("Bar-Thermal-3034bSSE3-Pascal.flavia.res")<<endl;
	Str_binary_data_GiD binary_data(string(argv[1])+string("Bar-Thermal-3034bSSE3-Pascal.flavia.res"));
	binary_data.read_meshes();
	binary_data.write_meshes();

	while (auto one_result = binary_data.read_one_result()) {
		binary_data.results_.emplace_back(move(*one_result));
	}
	ofstream SaveFile("test.flavia.res");
	//for (auto& res : binary_data.results_) {
	//	std::cout << "Analysis  " << "''" << res.analysis_ << "''" << "  Result   " << res.results_ << "  Step  " << res.step_ << "  ";
	//	for (auto& comp : res.component_names_) {
	//		std::cout << comp << " ";
	//	}
	//	std::cout << std::endl;
	//	for (auto i = 0; i < res.number_of_results_; ++i) {
	//		auto [node_number, data] = res.get_one_result(i);
	//		std::cout << node_number << " ";
	//		for (auto j = 0; j < res.result_size_; ++j) {
	//			std::cout << data[j] << " ";
	//		}
	//		std::cout << std::endl;
	//	}
	//}
	for (auto& res : binary_data.results_) {
		SaveFile << "Result " << "\"" << res.analysis_ << "\"" << "  Result   " << res.results_ << "  Step  " << res.step_ << "  "<< endl;;
		SaveFile << "Values";
		//for (auto& comp : res.component_names_) {
		//	SaveFile << comp << " ";
		//}
		SaveFile << endl;
		for (auto i = 0; i < res.number_of_results_; ++i) {
			auto [node_number, data] = res.get_one_result(i);
			SaveFile << node_number << " ";
			for (auto j = 0; j < res.result_size_; ++j) {
				SaveFile << data[j] << " ";
			}
			SaveFile << endl;
		}
		SaveFile << "End Values" << endl;
	}
	SaveFile.close();

	GiD_ClosePostResultFile();
	GiD_PostDone();
}